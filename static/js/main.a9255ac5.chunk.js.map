{"version":3,"sources":["components/Grid.jsx","components/Scene.jsx","serviceWorker.js","index.js","App.js"],"names":["STROKE","STROKE_WIDTH","Grid","props","arguments","length","undefined","innerHeight","innerWidth","gridSize","padding","lineCounts","vertical","Math","ceil","horizontal","lines","Array","fill","map","_","i","xCoordinate","react_default","a","createElement","ReactKonva","points","stroke","strokeWidth","j","yCoordinate","concat","GRID_SIZE","Scene","_useWindowSize","useWindowSize","width","window","height","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4NAGMA,EAAS,OACTC,EAAe,GAEN,SAASC,IAAe,IAAVC,EAAUC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAE3BG,EAGAJ,EAHAI,YACAC,EAEAL,EAFAK,WACAC,EACAN,EADAM,SAGAC,GACWF,EAAa,EAAI,GAAMC,GAAYA,EAD9CC,GAEaH,EAAc,EAAI,GAAME,GAAYA,EAGjDE,EAAa,CACbC,SAAUC,KAAKC,MAAMN,EAAaE,GAAoBD,GACtDM,WAAYF,KAAKC,MAAMP,EAAcG,GAAsBD,IAG3DO,EAAQ,CACRJ,SAAUK,MAAMN,EAAWC,UACtBM,OACAC,IAAI,SAACC,EAAGC,GACL,IAAIC,EAAcZ,EAAmBW,EAAIZ,EAEzC,OAAOc,EAAAC,EAAAC,cAACC,EAAA,KAAD,CACHC,OAAQ,CAACL,EAAa,EAAGA,EAAaf,GACtCqB,OAAQ5B,EACR6B,YAAa5B,MAGzBc,WAAYE,MAAMN,EAAWI,YACxBG,OACAC,IAAI,SAACC,EAAGU,GACL,IAAIC,EAAcrB,EAAqBoB,EAAIrB,EAE3C,OAAOc,EAAAC,EAAAC,cAACC,EAAA,KAAD,CACHC,OAAQ,CAAC,EAAGI,EAAavB,EAAYuB,GACrCH,OAAQ5B,EACR6B,YAAa5B,OAK7B,OAAOe,EAAMJ,SAASoB,OAAOhB,EAAMD,YC1CvC,IAAMkB,EAAY,GAEH,SAASC,IAAgB9B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,OAAA+B,EACFC,MAA5B7B,EAD8B4B,EAC9B5B,YAAaC,EADiB2B,EACjB3B,WAEnB,OACIe,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOW,MAAOC,OAAO9B,WAAY+B,OAAQD,OAAO/B,aAC5CgB,EAAAC,EAAAC,cAACC,EAAA,MAAD,KACIH,EAAAC,EAAAC,cAACvB,EAAD,CACIK,YAAaA,EACbC,WAAYA,EACZC,SAAUwB,MCLVO,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cCHD,WACb,OADoCrB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAElCmB,EAAAC,EAAAC,cAACS,EAAD,ODCY,MAASY,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a9255ac5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Line } from 'react-konva';\r\n\r\nconst STROKE = '#ddd';\r\nconst STROKE_WIDTH = 0.5;\r\n\r\nexport default function Grid(props={}) {\r\n    let {\r\n        innerHeight,\r\n        innerWidth,\r\n        gridSize,\r\n    } = props;\r\n\r\n    let padding = {\r\n        vertical: (innerWidth / 2 - 0.5 * gridSize) % gridSize,\r\n        horizontal: (innerHeight / 2 - 0.5 * gridSize) % gridSize,\r\n    };\r\n\r\n    let lineCounts = {\r\n        vertical: Math.ceil((innerWidth - padding.vertical) / gridSize),\r\n        horizontal: Math.ceil((innerHeight - padding.horizontal) / gridSize),\r\n    };\r\n\r\n    let lines = {\r\n        vertical: Array(lineCounts.vertical)\r\n            .fill()\r\n            .map((_, i) => {\r\n                let xCoordinate = padding.vertical + i * gridSize;\r\n\r\n                return <Line\r\n                    points={[xCoordinate, 0, xCoordinate, innerHeight]}\r\n                    stroke={STROKE}\r\n                    strokeWidth={STROKE_WIDTH}\r\n                />\r\n            }),\r\n        horizontal: Array(lineCounts.horizontal)\r\n            .fill()\r\n            .map((_, j) => {\r\n                let yCoordinate = padding.horizontal + j * gridSize;\r\n\r\n                return <Line\r\n                    points={[0, yCoordinate, innerWidth, yCoordinate]}\r\n                    stroke={STROKE}\r\n                    strokeWidth={STROKE_WIDTH}\r\n                />\r\n            }),\r\n    }\r\n\r\n    return lines.vertical.concat(lines.horizontal);\r\n}","import React from 'react';\r\nimport useWindowSize from '@rehooks/window-size';\r\nimport { Stage, Layer } from 'react-konva'\r\n\r\nimport Grid from './Grid';\r\n\r\nconst GRID_SIZE = 80;\r\n\r\nexport default function Scene(props={}) {\r\n    let { innerHeight, innerWidth } = useWindowSize();\r\n\r\n    return (\r\n        <Stage width={window.innerWidth} height={window.innerHeight}>\r\n            <Layer>\r\n                <Grid\r\n                    innerHeight={innerHeight}\r\n                    innerWidth={innerWidth}\r\n                    gridSize={GRID_SIZE}\r\n                />\r\n            </Layer>\r\n        </Stage>\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport Scene from './components/Scene';\n\nexport default function App(props={}) {\n  return (\n    <Scene />\n  );\n}"],"sourceRoot":""}